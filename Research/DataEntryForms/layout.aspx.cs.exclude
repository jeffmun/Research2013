using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Services;
using System.Web.UI;
using System.Web.UI.WebControls;
using Obout.Grid;
using Obout.Ajax.UI.HTMLEditor;
using DataEntryFramework3;
using uwac;

public partial class DataEntryForms_layout : OboutInc.oboutAJAXPage  //System.Web.UI.Page
{

	protected void Page_Init(object sender, EventArgs e)
	{
		Master.DDL_Master_SelectStudyID.SelectedIndexChanged += new EventHandler(Master_Study_Changed);
	}

	//If the master page default study is changed, update the Measure DDL
	protected void Master_Study_Changed(object sender, EventArgs e)
	{
		LoadMeasures();
	}


	protected void Page_Load(object sender, EventArgs e)
	{

		//DataEntryController1.DatabaseTable = "ALL_ABC";
		//DataEntryController1.PrimaryKeyField = "abc_pk";
		//DataEntryController1.PrimaryKeyVal = 1822;

		if (!IsPostBack)
		{
			LoadMeasures();

		}



	}


	protected void ddlMeas_SelectedIndexChanged(object sender, EventArgs e)
	{
		LoadFields(ddlMeas.SelectedValue);
	}



	protected void LoadMeasures()
	{

		SQL_utils sql = new SQL_utils("backend");

		DataTable dt = sql.DataTable_from_SQLstring("select measureID, measname from tblMeasure where measureID in " +
			" (select measureID from tblstudymeas where studyID = " + Master.Master_studyID.ToString() + ") order by measname ");

		ddlMeas.DataSource = dt;
		ddlMeas.DataBind();
		sql.Close();
	}


	protected void LoadFields_for_layout(string str_measureID)
	{

		SQL_utils sql = new SQL_utils();

		DataTable dt = sql.DataTable_from_SQLstring("exec spDEF_AutoLayout " + str_measureID);

		BuildTables(dt);
		sql.Close();

	}





	protected void LoadSections(string str_measureID)
	{

		SQL_utils sql = new SQL_utils();

		//Sections
		DataTable dt_sections = GetSectionText(str_measureID);

		GridSections1.DataSource = dt_sections;
		GridSections1.DataBind();

		sql.Close();
	}

	protected void LoadColumns(string sectionID)
	{
		SQL_utils sql = new SQL_utils();

		DataTable dt_columns = sql.DataTable_from_SQLstring("select * from datTable_Section_Column where sectionID = " + sectionID);

		GridColumns.DataSource = dt_columns;
		GridColumns.DataBind();
		GridColumns.Visible = true;

		sql.Close();
	}

	protected void LoadFields(string str_measureID)
	{
		SQL_utils sql = new SQL_utils();

		//Fields
		DataTable dt_fields = sql.DataTable_from_SQLstring("select pk, ord_pos, databasefield, layout_section, layout_row, layout_col " +
			" , fieldlabel, aspxfieldlabeltext, isReadOnly, fieldvaluesetID " +
			" from datfieldinfo where databasetable = " +
			"(select name from datTable where tableID = (select tableID from datTable_measure where measureID = " + str_measureID + ")) " +
			" order by layout_section, layout_row, layout_col, ord_pos");


		DataTable dt = sql.DataTable_from_SQLstring("exec spDEF_AutoLayout " + str_measureID);

		Grid1.DataSource = dt_fields;
		Grid1.DataBind();
		Grid1.Visible = true;

		sql.Close();

	}


	protected DataTable GetSectionText(string str_measureID)
	{
		SQL_utils sql = new SQL_utils();

		DataTable dt_sectiontext =  sql.DataTable_from_SQLstring("select sectionID, tableID, sectionnum, sectionheadertext" +
			" from datTable_Section where tableID = " +
			"(select tableID from datTable_measure where measureID = " + str_measureID + ") " +
			" order by sectionnum");

		sql.Close();
		return dt_sectiontext;
	}


	#region Edit Field Metadata
	public struct Myfield
	{
		public string pk;
		public string layout_section;
		public string layout_row;
		public string layout_col;

		public string width_label;
		public string width_box;
		public string isReadOnly;
		public string showValueLabels;


		public string aspxfieldlabeltext;
		public string fieldlabel;
	}


	[WebMethod]
	public static void UpdateField(Myfield field)
	{


		SQL_utils sql = new SQL_utils();

		string pk = field.pk;
		string layout_section = field.layout_section;
		string layout_row = field.layout_row;
		string layout_col = field.layout_col;


		string width_label = field.width_label;
		string width_box = field.width_box;
		string isReadOnly = field.isReadOnly;
		string showValueLabels = field.showValueLabels;

		string aspxfieldlabeltext = field.aspxfieldlabeltext;
		string fieldlabel = field.fieldlabel;


		if (layout_section == "") layout_section = "0";
		if (layout_row == "") layout_row = "0";
		if (layout_col == "") layout_col = "0";
		if (isReadOnly == "") isReadOnly = "0";
		if (showValueLabels == "") showValueLabels = "0";

		if (width_label == "") width_label = "300";
		if (width_box == "") width_box = "50";


		List<SqlParameter> ps = new List<SqlParameter>();

		ps.Add(sql.CreateParam("pk", pk, "int"));
		ps.Add(sql.CreateParam("layout_section", layout_section, "int"));
		ps.Add(sql.CreateParam("layout_row", layout_row, "int"));
		ps.Add(sql.CreateParam("layout_col", layout_col, "int"));

		ps.Add(sql.CreateParam("width_label", width_label, "int"));
		ps.Add(sql.CreateParam("width_box", width_box, "int"));
		ps.Add(sql.CreateParam("isReadOnly", isReadOnly, "int"));
		ps.Add(sql.CreateParam("showValueLabels", showValueLabels, "int"));

		ps.Add(sql.CreateParam("aspxfieldlabeltext", aspxfieldlabeltext, "text"));
		ps.Add(sql.CreateParam("fieldlabel", fieldlabel, "text"));

		sql.NonQuery_from_ProcName("spDEF_Edit_FieldInfo", ps);

		sql.Close();
	}
	#endregion 



	protected void btnCommand(object sender, CommandEventArgs e)
	{
		if(e.CommandName=="LoadLayout")
		{
			LoadFields_for_layout(ddlMeas.SelectedValue);
			Grid1.Visible = false;
			GridSections1.Visible = false;
		}
		else if (e.CommandName == "LoadFields")
		{
			updatepanel_Sections.Visible = true;
			Grid1.Visible = true;
			GridSections1.Visible = true;

			LoadSections(ddlMeas.SelectedValue);
			LoadFields(ddlMeas.SelectedValue);
		}        
		else if (e.CommandName == "InsertSection")
		{
			SQL_utils sql = new SQL_utils();

			string str_sql = "exec spDEF_Increment_LayoutSection " + ddlMeas.SelectedValue.ToString() + ", " + txtSection.Text;
			sql.NonQuery_from_SQLstring(str_sql);

			LoadFields(ddlMeas.SelectedValue);

			sql.Close();

		}
		else if (e.CommandName == "DeleteSection")
		{
			SQL_utils sql = new SQL_utils();

			int n = sql.IntScalar_from_SQLstring("select count(*) from datfieldinfo where databasetable in " + 
					" (select name from datTable where tableID in " +
					" (select tableID from datTable_Measure where measureID = " + ddlMeas.SelectedValue.ToString() + ")) and " + 
					" layout_section = " + txtSection.Text);

			if (n==0)
			{
				string str_sql2 = "exec spDEF_Delete_LayoutSection " + ddlMeas.SelectedValue.ToString() + ", " + txtSection.Text;
				sql.NonQuery_from_SQLstring(str_sql2);
			}
			else{

			}
			//LoadFields(ddlMeas.SelectedValue);

			txtSection.Text = "";

			sql.Close();

		}



		else if (e.CommandName == "EditSectionHeaderText")
		{
			SQL_utils sql = new SQL_utils();

			string txt = sql.StringScalar_from_SQLstring("select coalesce(sectionheadertext,'') sectionheadertext from datTable_Section where sectionID=" + e.CommandArgument.ToString());

			Editor.Content = txt;
			Editor.Visible = true;
			btnSaveSectionText.Visible = true;
			btnSaveColumnText.Visible = false;

			hidSectionID.Value = e.CommandArgument.ToString();
			lblEditor_Contents.Text = "Currently editing: SectionID " + e.CommandArgument.ToString();

			HighlightSectionRow(e.CommandArgument.ToString());

			LoadColumns(e.CommandArgument.ToString());

			sql.Close();
		}
		else if (e.CommandName == "EditColumnHeaderText")
		{
			SQL_utils sql = new SQL_utils();

			string txt = sql.StringScalar_from_SQLstring("select coalesce(colheadertext,'') colheadertext from datTable_Section_Column where columnID=" + e.CommandArgument.ToString());

			Editor.Content = txt;
			Editor.Visible = true;
			btnSaveSectionText.Visible = false;
			btnSaveColumnText.Visible = true;

			HighlightSectionRow(hidSectionID.Value.ToString());
			HighlightColumnRow(e.CommandArgument.ToString());


			hidColumnID.Value = e.CommandArgument.ToString();
			lblEditor_Contents.Text = "Currently editing: ColumnID " + e.CommandArgument.ToString();


			sql.Close();
		}
		else if (e.CommandName=="UpdateWidth")
		{
			//create proc spLayout_Update_Width
			//(@measureID int, @sectionnum int, @rownum int, @colnum int, @width_label int, @width_box int)

			string txt_sectionnum = txtSection.Text;
			string txt_rownum = txtRow.Text;
			string txt_colnum = txtCol.Text;
			string txt_width_label = txtWidth_label.Text;
			string txt_width_box = txtWidth_box.Text;

			int flag = 0;
			if(string.IsNullOrEmpty( txt_sectionnum))  flag++;
			if(string.IsNullOrEmpty( txt_rownum ))  flag++;
			if(string.IsNullOrEmpty( txt_colnum ))  flag++;
			if (string.IsNullOrEmpty(txt_width_label) & string.IsNullOrEmpty(txt_width_box)) flag++;


			if (string.IsNullOrEmpty(txt_width_label)) txt_width_label = "0";
			if (string.IsNullOrEmpty(txt_width_box)) txt_width_box = "0";


			if (flag==0 )
			{
				SQL_utils sql = new SQL_utils();

				List<SqlParameter> ps = new List<SqlParameter>();

				ps.Add(sql.CreateParam("measureID", ddlMeas.SelectedValue.ToString(), "int"));
				ps.Add(sql.CreateParam("sectionnum", txt_sectionnum, "int"));
				ps.Add(sql.CreateParam("rownum", txt_rownum, "int"));
				ps.Add(sql.CreateParam("colnum", txt_colnum, "int"));
				ps.Add(sql.CreateParam("width_label", txt_width_label, "int"));
				ps.Add(sql.CreateParam("width_box", txt_width_box, "int"));

				sql.NonQuery_from_ProcName("spLayout_Update_Width", ps);

				sql.Close();
			}


		}

	}
	
	

	protected void btnSaveSectionText_Click(object sender, EventArgs e)
	{
		SQL_utils sql = new SQL_utils();

		sql.NonQuery_from_SQLstring("update datTable_Section set sectionheadertext = '" + Editor.Content + "' where sectionID=" + hidSectionID.Value.ToString());
		
		sql.Close();

		Editor.Visible = false;
		btnSaveSectionText.Visible = false;
		btnSaveColumnText.Visible = false;


		LoadSections(ddlMeas.SelectedValue.ToString());
		
		updatepanel_Sections.Update();
		sql.Close();

	}

	protected void btnSaveColumnText_Click(object sender, EventArgs e)
	{
		SQL_utils sql = new SQL_utils();

		sql.NonQuery_from_SQLstring("update datTable_Section_Column set colheadertext = '" + Editor.Content + "' where columnID=" + hidColumnID.Value.ToString());

		sql.Close();

		Editor.Visible = false;
		btnSaveSectionText.Visible = false;
		btnSaveColumnText.Visible = false;

		//LoadSections(ddlMeas.SelectedValue.ToString());

		LoadColumns(hidSectionID.Value.ToString());

		lblEditor_Contents.Text = "";

		updatepanel_Sections.Update();
		sql.Close();

	}


	protected void HighlightSectionRow(string sectionID)
	{

		foreach(GridViewRow row in GridSections1.Rows)
		{
			if (row.RowType == DataControlRowType.DataRow)
			{
				if (row.Cells[0].Text == sectionID)
				{
					row.BackColor = Color.SkyBlue;
				}
				else
				{
					row.BackColor = Color.White;
				}
			}
		}

	}

	protected void HighlightColumnRow(string columnID)
	{

		foreach (GridViewRow row in GridColumns.Rows)
		{
			if (row.RowType == DataControlRowType.DataRow)
			{
				if (row.Cells[0].Text == columnID)
				{
					row.BackColor = Color.SkyBlue;
				}
				else
				{
					row.BackColor = Color.White;
				}

			}
		}

	}
}